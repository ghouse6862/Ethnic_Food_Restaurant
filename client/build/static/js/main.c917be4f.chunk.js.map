{"version":3,"sources":["components/Slides/Slide1.jpeg","components/Slides/Slide2.jpg","components/Slides/Slide3.jpg","actions/index.js","components/MyCart.js","components/SlideDiv.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","setError","dispatch","msg","status","id","type","payload","getConfig","token","contentType","config","header","slide1","slide2","slide3","App","useSelector","state","auth","useDispatch","useEffect","headers","axios","get","then","res","data","catch","err","response","message","loadUser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,wQCK9BC,EAAW,SAACC,EAAUC,EAAKC,EAAQC,GAC5CH,EAAS,CACLI,KAAO,YACPC,QAAU,CACNJ,MACAC,SACAC,SAiPCG,EAAY,SAACC,GAA2C,IAApCC,EAAmC,uDAAvB,mBACnCC,EAAS,CACXC,OAAS,CACL,eAAiBF,IAMzB,OAHGD,IACCE,EAAOC,OAAO,cAAgBH,GAE3BE,G,mFC/EX,I,mDCxKaE,IAKAC,IAKAC,I,sECOEC,MAjBf,WAEE,IAAMP,EAAQQ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKV,SACxCP,EAAWkB,cAMjB,OAJAC,qBAAU,YH8DY,SAACnB,EAAUO,GAE/B,IAAMa,EAAUd,EAAUC,GAAOG,OAEjCW,IAAMC,IAAI,QAAS,CAACF,QAAUA,IACzBG,MAAK,SAAAC,GACFxB,EAAS,CACLI,KAAO,gBAEXJ,EAAS,CACLI,KAAO,cACPC,QAAO,2BACAmB,EAAIC,MADJ,IAEHlB,MAAQA,SAInBmB,OAAM,SAAAC,GACH5B,EAASC,EAAU2B,EAAIC,SAASH,KAAKI,QAASF,EAAIC,SAAS1B,OAAQ,gBACnEF,EAAS,CACLI,KAAO,oBGjFnB0B,CAAS9B,EAAUO,KAClB,IAGD,uCCZgBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLC,QAAQD,MAAMA,EAAMjB,c","file":"static/js/main.c917be4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Slide1.3148ef7c.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Slide2.412cbf82.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Slide3.2f4c64a4.jpg\";","import axios from 'axios';\n\n\nexport const limit = 4;\n\nexport const setError = (dispatch, msg, status, id) => {\n    dispatch({\n        type : 'SET_ERROR',\n        payload : {\n            msg,\n            status,\n            id\n        }\n    });\n}\n\nexport const signUpUser = (dispatch, name, email, phnno, password) => {\n\n    axios.post('/user/register',{name, email, phnno, password})\n        .then(res => {\n            dispatch({\n                type : 'CLEAR_ERROR'\n            });\n            dispatch({\n                type: 'REGISTRATION_SUCCESS',\n                payload: { ...res.data,\n                    token : res.headers['auth-token']\n                }\n            });\n        })\n        .catch(err => {\n            setError(dispatch, err.response.data.message, err.response.status, 'REGISTRATION_FAILURE');\n            dispatch({\n                type: 'REGISTRATION_FAILURE'\n            });\n        })\n}\n\nexport const signInUser = (dispatch, email, password) => {\n\n    axios.post('/user/login',{email, password})\n        .then(res => {\n            dispatch({\n                type : 'CLEAR_ERROR'\n            });\n            dispatch({\n                type: 'LOGIN_SUCCESS',\n                payload: { ...res.data,\n                    token : res.headers['auth-token']\n                }\n            });\n        })\n        .catch(err => {\n            setError(dispatch, err.response.data.message, err.response.status, 'LOGIN_FAILURE');\n            dispatch({\n                type: 'LOGIN_FAILURE'\n            });\n        })\n}\n\nexport const logoutUser = (dispatch, id, token) => {\n\n    const headers = getConfig(token).header;\n\n    axios.post('/user/logout', {id}, { headers : headers })\n        .then(res => {\n            dispatch({\n                type : 'CLEAR_ERROR'\n            });\n            dispatch({\n                type : 'LOGOUT_SUCCESS'\n            });\n        })\n        .catch(err => {\n            setError(dispatch, err.response.data.message, err.response.status, 'LOGOUT_FAILURE');\n            dispatch({\n                type : 'LOGOUT_FAILURE'\n            });\n        })\n}\n\nexport const loadUser = (dispatch, token) => {\n\n    const headers = getConfig(token).header;\n\n    axios.get('/user', {headers : headers})\n        .then(res => {\n            dispatch({\n                type : 'CLEAR_ERROR'\n            });\n            dispatch({\n                type : 'USER_LOADED',\n                payload : {\n                    ...res.data,\n                    token : token\n                }\n            });\n        })\n        .catch(err => {\n            setError(dispatch, err.response.data.message, err.response.status, 'AUTH_FAILURE');\n            dispatch({\n                type : 'AUTH_FAILURE'\n            });\n\n        })\n}\n\nexport const addProduct = (dispatch, token, productName, description, price, qty, category, file) => {\n\n    let fd = new FormData();\n    fd.append('productName', productName);\n    fd.append('description', description);\n    fd.append('price', price);\n    fd.append('qty', qty);\n    fd.append('category', category);\n    fd.append('images', file, file.name);\n\n    axios.post('/products/add', fd, {headers : getConfig(token,'multipart/form-data').header})\n        .then(res => {\n            dispatch({\n                type : 'CLEAR_ERROR'\n            });\n            dispatch({\n                type : 'ITEM_ADDED'\n            });\n        })\n        .catch(err => {\n            \n            setError(dispatch, err.response.data.message, err.response.status, 'ITEM_ADD_FAILURE');\n        })\n}\n\nexport const editProduct = (dispatch, token, productName, description, price, qty, category, file, id) => {\n\n    let fd = new FormData();\n        fd.append('productName', productName);\n        fd.append('description', description);\n        fd.append('price', price);\n        fd.append('qty', qty);\n        fd.append('category', category);\n\n    if(file) {\n        fd.append('images', file, file.name); \n    }\n\n    axios.put(`/products/${id}`, fd, {headers : getConfig(token,'multipart/form-data').header})\n        .then(res => {\n            dispatch({\n                type : 'CLEAR_ERROR'\n            });\n            dispatch({\n                type : 'ITEM_EDITED',\n                payload : {id, details : {productName, description, price, qty, category}}\n            });\n        })\n        .catch(err => {\n            \n            setError(dispatch, err.response.data.message, err.response.status, 'ITEM_EDIT_FAILURE');\n        })\n\n}\n\nexport const deleteProduct = (dispatch, id, token) => {\n    \n    axios.delete(`/products/${id}`, {headers: getConfig(token).header})\n        .then(res => {\n            \n            dispatch({\n                type : 'CLEAR_ERROR'\n            });\n\n            dispatch({\n                type : 'ITEM_DELETED',\n                payload : id\n            })\n        })\n        .catch(err => {\n\n            setError(dispatch, err.response.data.message, err.response.status, 'ITEM_DELETE_FAILURE');\n        })\n}\n\nexport const getProducts = (dispatch, category, minPrice, maxPrice, searchTerm, skip=0) => {\n    let query = '/products/?category=';\n\n    if(category) {\n        query += category;\n    }\n    query += '&minprice='\n    if(minPrice) {\n        query += minPrice;\n    }\n    query += '&maxprice='\n    if(maxPrice) {\n        query += maxPrice;\n    }\n    query += '&searchTerm='\n    if(searchTerm) {\n        query += searchTerm;\n    }\n    query += '&limit='+limit+'&skip='+skip;\n    //request for data\n    axios.get(query)\n        .then(res => { dispatch({\n            type : 'GET_ITEMS',\n            payload : res.data\n            });\n            dispatch({\n                type: 'SET_SEARCH_FIELDS',\n                payload: {category, minPrice, maxPrice, searchTerm, skip}\n            }); \n        })\n        .catch(err => setError(dispatch, err.response.data.message, err.response.status, 'ITEMS_FETCH_FAILURE'))\n}\n\nexport const placeOrder = (dispatch, cart, user, orderType, token) => {\n\n    axios.post('/orders/add', {cart, user, orderType}, {headers: getConfig(token).header})\n        .then(res => {\n                \n        dispatch({\n            type : 'CLEAR_ERROR'\n        })\n\n        dispatch({\n            type : 'ORDER_PLACED' \n        })\n\n        })\n        .catch(err => setError(dispatch, err.response.data.message, err.response.status, 'ORDER_FAILURE'))\n}\n\nexport const getOrders = (dispatch, token) => {\n   \n    axios.get('/orders', {headers: getConfig(token).header})\n        .then(res => {\n            \n            dispatch({\n                type : 'CLEAR_ERROR'\n            })\n\n            dispatch({\n                type : 'GET_ORDERS',\n                payload : res.data\n            })\n            \n        })\n        .catch(err => {\n            setError(dispatch, err.response.data.message, err.response.status, 'ORDER_FAILURE');\n        })\n}\n\nexport const getConfig = (token, contentType='application/json') => {\n    const config = {\n        header : {\n            'Content-Type' : contentType\n        }\n    }\n    if(token) {\n        config.header['auth-token'] = token;\n    }\n    return config;\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink, Button, Form, FormGroup, Label, Input,\n    Modal, ModalHeader, ModalBody, Alert,\n    Table } from \"reactstrap\";\nimport { placeOrder, setError } from \"../actions\";\n\nexport default function MyCart() {\n\n    const cart = useSelector(state => state.cart);\n    const user = useSelector(state => state.auth.user);\n    const token = useSelector(state => state.auth.token);\n    const error = useSelector(state => state.error);\n    const dispatch = useDispatch();\n\n    const [msg, setMsg] = useState(null);\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => { \n        dispatch({\n            type : 'CLEAR_ERROR'\n        });\n        setMsg(null);\n        setIsOpen(!isOpen);\n    }\n\n    const onClick = () => {\n\n        let type = document.getElementsByName('radio');\n        let orderType;\n\n        for(let i = 0; i < type.length; i++) {\n            if(type[i].checked) {\n                orderType = type[i].value;\n            }\n        }\n\n        if(!orderType) {\n            setError(dispatch, 'OrderType is Required',400,'ORDER_FAILURE');\n        } else {\n            placeOrder(dispatch, cart, user, orderType, token);\n        }\n    }\n\n    const emptyCart = () => {\n        dispatch({\n            type : 'ORDER_RESET'\n        })\n    }\n\n    const increaseQty = (id) => {\n        \n        cart.items = cart.items.map(product => {\n            if(product._id === id) {\n                product.qty += 1;\n                cart.total = (parseFloat(cart.total)+parseFloat(product.price)).toFixed(2);                \n            }\n            return product;\n        })\n\n        dispatch({\n            type : 'ADD_TO_CART',\n            payload : {\n                items : cart.items,\n                total : cart.total,\n            }\n        })\n    }\n\n    const decreaseQty = (id) => {\n\n        cart.items = cart.items.map(product => {\n            if(product._id === id) {\n                product.qty -= 1;\n                cart.total = (parseFloat(cart.total)-parseFloat(product.price)).toFixed(2);\n            }\n            return product;\n        })\n\n        cart.items = cart.items.filter(product => product.qty !== 0);\n\n        dispatch({\n            type : 'ADD_TO_CART',\n            payload : {\n                items : cart.items,\n                total : cart.total,\n            }\n        })\n    }\n\n    useEffect(() => {\n        if(error.id === 'ORDER_FAILURE') {\n            setMsg(error.msg);\n        }\n        if(error.status == null && cart.placed) {\n            dispatch({\n                type : 'ORDER_RESET'\n            })\n            setMsg(\"Success! Your Order has been placed & will be ready in 1 hour.\");\n        }\n    }, [error, cart])\n\n    return (\n        <div>\n           <NavLink onClick={toggle} href=\"#\">My Cart</NavLink> \n           <Modal isOpen={isOpen} toggle={toggle}>\n                <ModalHeader toggle={toggle}>Your Cart: </ModalHeader>\n                <ModalBody>\n\n                    {msg && error.id === 'ORDER_FAILURE' ? <Alert color=\"danger\">{msg}</Alert> : null}\n                    {msg && error.status == null ? <Alert color=\"success\">{msg}</Alert> : null}\n\n                    {cart.items.length > 0 ?\n                    <React.Fragment>\n                    <Table striped>\n                        <thead>\n                            <tr>\n                            <th>Item No</th>\n                            <th>Item Name</th>\n                            <th>quantity</th>\n                            <th>Price</th>\n                            <th>Update Qty</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {cart.items.map((product, index) => (\n                            <tr>\n                                <th scope=\"row\">{index}</th>\n                                <td>{product.productName}</td>\n                                <td>{product.qty}</td>\n                                <td>{(product.price * product.qty).toFixed(2)}</td>\n                                <td><button style={incStyle} onClick = {() => increaseQty(product._id)}>+</button>\n                                    <button style={decStyle} onClick = {() => decreaseQty(product._id)}>-</button></td>\n                            </tr>\n                        ))\n                    }\n                    <tr>\n                        <th scope=\"row\"></th>\n                        <td></td>\n                        <th>Total</th>\n                        <td>{cart.total}</td>\n                    </tr>\n                    </tbody>\n                    </Table>\n                        <Form>\n                            <FormGroup tag=\"fieldset\">\n                            <legend>Order Type: </legend>\n                            <FormGroup check>\n                            <Label check>\n                                <Input type=\"radio\" name=\"radio\" value=\"dinein\"/>{' '}\n                                Dine-in\n                            </Label>\n                            </FormGroup>\n                            <FormGroup check>\n                            <Label check>\n                                <Input type=\"radio\" name=\"radio\" value=\"pickup\"/>{' '}\n                                Pick-up\n                            </Label>\n                            </FormGroup>\n                            </FormGroup>\n                        </Form>\n                        <Button\n                            onClick = {() => onClick()}\n                            color=\"success\"\n                            block\n                            style={{marginTop : \"0.5rem\"}}\n                            >Place Order</Button>\n                        <Button\n                            onClick = {() => emptyCart()}\n                            color=\"danger\"\n                            block\n                            style={{marginTop : \"0.5rem\"}}\n                            >Empty Cart</Button>    \n                    </React.Fragment>\n                    :\n                    <h4>Nothing to show!</h4>}\n                </ModalBody>\n           </Modal>\n        </div>\n    )\n}\n\nconst incStyle = {\n    color : 'white',\n    backgroundColor : '#4fa846',\n    border : 'none',\n    padding: '4px 7px',\n    cursor : 'pointer',\n    marginRight : '5px'\n}\n\nconst decStyle = {\n    color : 'white',\n    backgroundColor : '#dc4245',\n    border : 'none',\n    padding: '4px 7px',\n    cursor : 'pointer'\n}\n\n","import React, { useState } from 'react'\nimport {\n    Carousel,\n    CarouselItem,\n    CarouselControl,\n    CarouselIndicators,\n    CarouselCaption\n  } from 'reactstrap';\nimport slide1 from './Slides/Slide1.jpeg';\nimport slide2 from './Slides/Slide2.jpg';  \nimport slide3 from './Slides/Slide3.jpg';    \n\nconst items = [\n    {\n        src: slide1,  \n        altText: 'Slide 1',\n        caption: 'Slide 1'\n    },\n    {\n        src: slide2, \n        altText: 'Slide 2',\n        caption: 'Slide 2'\n    },\n    {\n        src: slide3, \n        altText: 'Slide 3',\n        caption: 'Slide 3'\n    }\n];\n\nexport default function SlideDiv() {\n\n    const [activeIndex, setActiveIndex] = useState(0);\n    const [animating, setAnimating] = useState(false);\n\n  const next = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1;\n    setActiveIndex(nextIndex);\n  }\n\n  const previous = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1;\n    setActiveIndex(nextIndex);\n  }\n\n  const goToIndex = (newIndex) => {\n    if (animating) return;\n    setActiveIndex(newIndex);\n  }\n\n  const slides = items.map((item) => {\n    return (\n      <CarouselItem\n        onExiting={() => setAnimating(true)}\n        onExited={() => setAnimating(false)}\n        key={item.src}\n      >\n        <img src={item.src} alt={item.altText} />\n        <CarouselCaption captionText={item.caption} captionHeader={item.caption} />\n      </CarouselItem>\n    );\n  });\n\n  return (\n    <Carousel\n      activeIndex={activeIndex}\n      next={next}\n      previous={previous}\n      className=\"mb-5\"\n    >\n      <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={goToIndex} />\n      {slides}\n      <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\n      <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\n    </Carousel>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport AppNavbar from './components/AppNavbar';\nimport SlideDiv from './components/SlideDiv';\nimport Menu from './components/Menu';\nimport MyOrders from './components/MyOrders';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport { loadUser } from \"./actions\";\nimport {BrowserRouter as Router, Route}  from 'react-router-dom';\n\n  \nfunction App() {\n\n  const token = useSelector(state => state.auth.token);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    loadUser(dispatch, token);  \n  }, []);\n  \n  return (\n    <div>\n      Hello\n    </div>\n\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}